/**
 * Describes the retry operation type.
 * @enum RetryOperationType
 */
export declare enum RetryOperationType {
    cbsAuth = "cbsAuth",
    connection = "connection",
    management = "management",
    receiverLink = "receiverLink",
    senderLink = "senderLink",
    sendMessage = "sendMessage",
    session = "session"
}
/**
 * Describes the parameters that need to be configured for the retry operation.
 * @interface RetryConfig
 */
export interface RetryConfig<T> {
    /**
     * @property {Promise<T>} operation The operation that needs to be retried.
     */
    operation: () => Promise<T>;
    /**
     * @property {string} connectionId The connection identifier. Used in logging information.
     * Extremely useful when multiple connections are logged in the same file.
     */
    connectionId: string;
    /**
     * @property {RetryOperationType} operationType The name/type of operation to be performed.
     * Extremely useful in providing better debug logs.
     */
    operationType: RetryOperationType;
    /**
     * @property {number} [times] Number of times the operation needs to be retried in case
     * of error. Default: 3.
     */
    times?: number;
    /**
     * @property {number} [delayInSeconds] Amount of time to wait in seconds before making the
     * next attempt. Default: 15.
     */
    delayInSeconds?: number;
}
/**
 * It will attempt to linearly retry an operation specified number of times with a specified
 * delay in between each retry. The retries will only happen if the error is retryable.
 *
 * @param {RetryConfig<T>} config Parameters to configure retry operation.
 *
 * @return {Promise<T>} Promise<T>.
 */
export declare function retry<T>(config: RetryConfig<T>): Promise<T>;
