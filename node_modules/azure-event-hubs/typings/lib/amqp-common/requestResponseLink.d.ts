import { Session, Connection, Sender, Receiver, Message, ReqResLink, SenderOptions, ReceiverOptions } from "../rhea-promise";
/**
 * Describes the options that can be specified while sending a request.
 * @interface SendRequestOptions
 */
export interface SendRequestOptions {
    /**
     * @property {number} [timeoutInSeconds] Max time to wait for the operation to complete.
     * Default: `10 seconds`.
     */
    timeoutInSeconds?: number;
    /**
     * @property {number} [times] Number of times the operation needs to be retried in case
     * of error. Default: 3.
     */
    times?: number;
    /**
     * @property {number} [delayInSeconds] Amount of time to wait in seconds before making the
     * next attempt. Default: 15.
     */
    delayInSeconds?: number;
}
/**
 * Describes an amqp request(sender)-response(receiver) link that is created over an amqp session.
 * @class RequestResponseLink
 */
export declare class RequestResponseLink implements ReqResLink {
    session: Session;
    sender: Sender;
    receiver: Receiver;
    /**
     * @constructor
     * @param {Session} session The amqp session.
     * @param {Sender} sender The amqp sender link.
     * @param {Receiver} receiver The amqp receiver link.
     */
    constructor(session: Session, sender: Sender, receiver: Receiver);
    /**
     * Provides the underlying amqp connection object.
     * @returns {Connection} Connection.
     */
    readonly connection: Connection;
    /**
     * Indicates whether the session and the sender and receiver links are all open or closed.
     * @returns {boolean} boolean - `true` - `open`, `false` - `closed`.
     */
    isOpen(): boolean;
    /**
     * Sends the given request message and returns the received response. If the operation is not
     * completed in the provided timeout in seconds `default: 10`, then the request will be retried
     * linearly for the provided number of times `default: 3` with the provided delay in seconds
     * `default: 15` between each attempt.
     *
     * @param {Message} request The AMQP message.
     * @param {SendRequestOptions} [options] Options that can be provided while sending a request.
     * @returns {Promise<T>} Promise<T>
     */
    sendRequest<T>(request: Message, options?: SendRequestOptions): Promise<T>;
    /**
     * Closes the sender, receiver link and the underlying session.
     * @returns {Promise<void>} Promise<void>
     */
    close(): Promise<void>;
    /**
     * Creates an amqp request/response link.
     *
     * @param {Connection} connection The amqp connection.
     * @param {SenderOptions} senderOptions Options that must be provided to create the sender link.
     * @param {ReceiverOptions} receiverOptions Options that must be provided to create the receiver link.
     * @returns {Promise<RequestResponseLink>} Promise<RequestResponseLink>
     */
    static create(connection: Connection, senderOptions: SenderOptions, receiverOptions: ReceiverOptions): Promise<RequestResponseLink>;
}
