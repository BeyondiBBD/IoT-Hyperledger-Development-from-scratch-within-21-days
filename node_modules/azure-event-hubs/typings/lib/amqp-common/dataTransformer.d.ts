/**
 * Describes the transformations that can be performed to encode/decode the data before sending it
 * on (or receiving it from) the wire.
 * @interface DataTransformer
 */
export interface DataTransformer {
    /**
     * @property {Function} encode A function that takes the body property from an EventData object
     * and returns an encoded body (some form of AMQP type).
     */
    encode: (body: any) => any;
    /**
     * @property {Function} decode A function that takes the body property from an AMQP message
     * and returns the decoded message body. If it cannot decode the body then it returns the body
     * as-is.
     */
    decode: (body: any) => any;
}
/**
 * The default data transformer that will be used by the Azure SDK.
 */
export declare class DefaultDataTransformer implements DataTransformer {
    /**
     * A function that takes the body property from an EventData object
     * and returns an encoded body (some form of AMQP type).
     *
     * @param {*} body The AMQP message body
     * @return {DataSection} encodedBody - The encoded AMQP message body as an AMQP Data type
     * (data section in rhea terms). Section object with following properties:
     * - typecode: 117 (0x75)
     * - content: The given AMQP message body as a Buffer.
     * - multiple: true | undefined.
     */
    encode(body: any): any;
    /**
     * @property {Function} [decode] A function that takes the body property from an AMQP message
     * (an AMQP Data type (data section in rhea terms)) and returns the decoded message body.
     * If it cannot decode the body then it returns the body
     * as-is.
     * @param {DataSection} body The AMQP message body
     * @return {*} decoded body or the given body as-is.
     */
    decode(body: any): any;
}
