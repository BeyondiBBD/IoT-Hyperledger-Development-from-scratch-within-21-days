import * as AsyncLock from "async-lock";
import { DeliveryAnnotations, MessageAnnotations } from "../../rhea-promise";
/**
 * Describes the options that can be provided to create an async lock.
 * @interface AsyncLockOptions
 */
export interface AsyncLockOptions {
    /**
     * @property {number} [timeout] The max timeout. Default is: 0 (never timeout).
     */
    timeout?: number;
    /**
     * @property {number} [maxPending] Maximum pending tasks. Default is: 1000.
     */
    maxPending?: number;
    /**
     * @property {boolean} [domainReentrant] Whether lock can reenter in the same domain.
     * Default is: false.
     */
    domainReentrant?: boolean;
    /**
     * @property {any} [Promise] Your implementation of the promise. Default is: global promise.
     */
    Promise?: any;
}
/**
 * Describes the servicebus connection string model.
 * @interface ServiceBusConnectionStringModel
 */
export interface ServiceBusConnectionStringModel {
    Endpoint: string;
    SharedAccessKeyName: string;
    SharedAccessKey: string;
    EntityPath?: string;
    [x: string]: any;
}
/**
 * Describes the eventhub connection string model.
 * @interface EventHubConnectionStringModel
 */
export interface EventHubConnectionStringModel {
    Endpoint: string;
    SharedAccessKeyName: string;
    SharedAccessKey: string;
    EntityPath?: string;
    [x: string]: any;
}
/**
 * Describes the stroage connection string model.
 * @interface StorageConnectionStringModel
 */
export interface StorageConnectionStringModel {
    DefaultEndpointsProtocol: string;
    AccountName: string;
    AccountKey: string;
    EndpointSuffix: string;
    [x: string]: any;
}
/**
 * Describes the iothub connection string model.
 * @interface IotHubConnectionStringModel
 */
export interface IotHubConnectionStringModel {
    HostName: string;
    SharedAccessKeyName: string;
    SharedAccessKey: string;
    DeviceId?: string;
}
/**
 * Defines an object with possible properties defined in T.
 * @type ParsedOutput<T>
 */
export declare type ParsedOutput<T> = {
    [P in keyof T]: T[P];
};
/**
 * Parses the connection string and returns an object of type T.
 * @param {string} connectionString The connection string to be parsed.
 * @returns {ParsedOutput<T>} ParsedOutput<T>.
 */
export declare function parseConnectionString<T>(connectionString: string): ParsedOutput<T>;
/**
 * Gets a new instance of the async lock with desired settings.
 * @param {AsyncLockOptions} [options] The async lock options.
 * @returns {AsyncLock} AsyncLock
 */
export declare function getNewAsyncLock(options?: AsyncLockOptions): AsyncLock;
/**
 * @constant {AsyncLock} defaultLock The async lock instance with default settings.
 */
export declare const defaultLock: AsyncLock;
/**
 * Describes a Timeout class that can wait for the specified amount of time and then resolve/reject
 * the promise with the given value.
 * @class Timout
 */
export declare class Timeout {
    private _timer?;
    set<T>(t: number, value?: T): Promise<T>;
    clear(): void;
    wrap<T>(promise: Promise<T>, t: number, value?: T): Promise<T>;
    private _promiseFinally;
    static set<T>(t: number, value?: T): Promise<T>;
    static wrap<T>(promise: Promise<T>, t: number, value?: T): Promise<T>;
}
/**
 * A wrapper for setTimeout that resolves a promise after t milliseconds.
 * @param {number} t - The number of milliseconds to be delayed.
 * @param {T} value - The value to be resolved with after a timeout of t milliseconds.
 * @returns {Promise<T>} - Resolved promise
 */
export declare function delay<T>(t: number, value?: T): Promise<T>;
/**
 * Generates a random number between the given interval
 * @param {number} min Min number of the range (inclusive).
 * @param {number} max Max number of the range (inclusive).
 */
export declare function randomNumberFromInterval(min: number, max: number): number;
/**
 * Type declaration for a Function type where T is the input to the function and V is the output
 * of the function.
 */
export declare type Func<T, V> = (a: T) => V;
export declare function executePromisesSequentially(promiseFactories: Array<any>, kickstart?: any): Promise<any>;
/**
 * Determines whether the given connection string is an iothub connection string.
 * @param {string} connectionString The connection string.
 * @return {boolean} boolean.
 */
export declare function isIotHubConnectionString(connectionString: string): boolean;
/**
 * Describes the delivery annotations.
 * @interface EventHubDeliveryAnnotations
 */
export interface EventHubDeliveryAnnotations extends DeliveryAnnotations {
    /**
     * @property {string} [last_enqueued_offset] The offset of the last event.
     */
    last_enqueued_offset?: string;
    /**
     * @property {number} [last_enqueued_sequence_number] The sequence number of the last event.
     */
    last_enqueued_sequence_number?: number;
    /**
     * @property {number} [last_enqueued_time_utc] The enqueued time of the last event.
     */
    last_enqueued_time_utc?: number;
    /**
     * @property {number} [runtime_info_retrieval_time_utc] The retrieval time of the last event.
     */
    runtime_info_retrieval_time_utc?: number;
    /**
     * @property {string} Any unknown delivery annotations.
     */
    [x: string]: any;
}
/**
 * Describes the delivery annotations.
 * @interface ServiceBusDeliveryAnnotations
 */
export interface ServiceBusDeliveryAnnotations extends DeliveryAnnotations {
    /**
     * @property {string} [last_enqueued_offset] The offset of the last event.
     */
    last_enqueued_offset?: string;
    /**
     * @property {number} [last_enqueued_sequence_number] The sequence number of the last event.
     */
    last_enqueued_sequence_number?: number;
    /**
     * @property {number} [last_enqueued_time_utc] The enqueued time of the last event.
     */
    last_enqueued_time_utc?: number;
    /**
     * @property {number} [runtime_info_retrieval_time_utc] The retrieval time of the last event.
     */
    runtime_info_retrieval_time_utc?: number;
    /**
     * @property {string} Any unknown delivery annotations.
     */
    [x: string]: any;
}
/**
 * Map containing message attributes that will be held in the message header.
 * @interface EventHubMessageAnnotations
 */
export interface EventHubMessageAnnotations extends MessageAnnotations {
    /**
     * @property {string | null} [x-opt-partition-key] Annotation for the partition key set for the event.
     */
    "x-opt-partition-key"?: string | null;
    /**
     * @property {number} [x-opt-sequence-number] Annontation for the sequence number of the event.
     */
    "x-opt-sequence-number"?: number;
    /**
     * @property {number} [x-opt-enqueued-time] Annotation for the enqueued time of the event.
     */
    "x-opt-enqueued-time"?: number;
    /**
     * @property {string} [x-opt-offset] Annotation for the offset of the event.
     */
    "x-opt-offset"?: string;
    /**
     * @property {any} Any other annotation that can be added to the message.
     */
    [x: string]: any;
}
/**
 * Map containing message attributes that will be held in the message header.
 * @interface ServiceBusMessageAnnotations
 */
export interface ServiceBusMessageAnnotations extends MessageAnnotations {
    /**
     * @property {string | null} [x-opt-partition-key] Annotation for the partition key set for the event.
     */
    "x-opt-partition-key"?: string | null;
    /**
     * @property {number} [x-opt-sequence-number] Annontation for the sequence number of the event.
     */
    "x-opt-sequence-number"?: number;
    /**
     * @property {number} [x-opt-enqueued-time] Annotation for the enqueued time of the event.
     */
    "x-opt-enqueued-time"?: number;
    /**
     * @property {string} [x-opt-offset] Annotation for the offset of the event.
     */
    "x-opt-offset"?: string;
    /**
     * @property {string} [x-opt-locked-until] Annotation for the message being locked until.
     */
    "x-opt-locked-until"?: Date | number;
}
