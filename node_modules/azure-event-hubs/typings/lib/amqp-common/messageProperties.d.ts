/// <reference types="node" />
import { MessageProperties as AmqpMessageProperties } from "../rhea-promise";
/**
 * Describes the defined set of standard properties of the message.
 * @interface MessageProperties
 */
export interface MessageProperties {
    /**
     * @property {string | number | Buffer} [messageId] The application message identifier that uniquely idenitifes a message.
     * The user is responsible for making sure that this is unique in the given context. Guids usually make a good fit.
     */
    messageId?: string | number | Buffer;
    /**
     * @property {string} [replyTo] The address of the node to send replies to.
     */
    replyTo?: string;
    /**
     * @property {string} [to] The address of the node the message is destined for.
     */
    to?: string;
    /**
     * @property {string | number | Buffer} [correlationId] The id that can be used to mark or identify messages between clients.
     */
    correlationId?: string | number | Buffer;
    /**
     * @property {string} [contentType] MIME type for the message.
     */
    contentType?: string;
    /**
     * @property {string} [contentEncoding] The content-encoding property is used as a modifier to the content-type.
     * When present, its valueindicates what additional content encodings have been applied to the application-data.
     */
    contentEncoding?: string;
    /**
     * @property {number} [absoluteExpiryTime] The time when this message is considered expired.
     */
    absoluteExpiryTime?: number;
    /**
     * @property {number} [creationTime] The time this message was created.
     */
    creationTime?: number;
    /**
     * @property {string} [groupId] The group this message belongs to.
     */
    groupId?: string;
    /**
     * @property {number} [groupSequence] The sequence number of this message with its group.
     */
    groupSequence?: number;
    /**
     * @property {string} [replyToGroupId] The group the reply message belongs to.
     */
    replyToGroupId?: string;
    /**
     * @property {string} [subject] A common field for summary information about the message
     * content and purpose.
     */
    subject?: string;
    /**
     * @property {string} [userId] The identity of the user responsible for producing the message.
     */
    userId?: string;
}
/**
 * Describes the operations that can be performed on the amqp message properties.
 * @module MessageProperties
 */
export declare namespace MessageProperties {
    /**
     * Converts MessageProperties to AmqpMessageProperties.
     * @param {MessageProperties} props Message properties.
     * @returns {AmqpMessageProperties} AmqpMessageProperties.
     */
    function toAmqpMessageProperties(props: MessageProperties): AmqpMessageProperties;
    /**
     * Converts AmqpMessageProperties to MessageProperties.
     * @param {AmqpMessageProperties} props Amqp message properties.
     * @returns {MessageProperties} MessageProperties.
     */
    function fromAmqpMessageProperties(props: AmqpMessageProperties): MessageProperties;
}
