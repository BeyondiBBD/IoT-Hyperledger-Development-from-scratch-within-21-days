import * as rhea from "rhea";
import { Connection } from "./connection";
import { Receiver, ReceiverOptions } from "./receiver";
import { Sender, SenderOptions } from "./sender";
export declare class Session {
    private _session;
    private _connection;
    constructor(connection: Connection, session: rhea.Session);
    readonly connection: Connection;
    readonly outgoing: any;
    isOpen(): boolean;
    /**
     * Determines whether the close from the peer is a response to a locally initiated close request.
     * @returns {boolean} `true` if close was locally initiated, `false` otherwise.
     */
    isClosed(): boolean;
    /**
     * Determines whether both local and remote endpoint for just the session itself are closed.
     * Within the "session_close" event handler, if this method returns `false` it means that
     * the local end is still open. It can be useful to determine whether the close
     * was initiated locally under such circumstances.
     *
     * @returns {boolean} `true` - closed, `false` otherwise.
     */
    isItselfClosed(): boolean;
    remove(): void;
    begin(): void;
    /**
     * Closes the amqp session.
     * @return {Promise<void>} Promise<void>
     * - **Resolves** the promise when rhea emits the "session_close" event.
     * - **Rejects** the promise with an AmqpError when rhea emits the "session_error" event while trying
     * to close an amqp session.
     */
    close(): Promise<void>;
    /**
     * Creates an amqp receiver on this session.
     * @param {Session} session The amqp session object on which the receiver link needs to be established.
     * @param {ReceiverOptions} [options] Options that can be provided while creating an amqp receiver.
     * @return {Promise<Receiver>} Promise<Receiver>
     * - **Resolves** the promise with the Receiver object when rhea emits the "receiver_open" event.
     * - **Rejects** the promise with an AmqpError when rhea emits the "receiver_close" event while trying
     * to create an amqp receiver.
     */
    createReceiver(options?: ReceiverOptions): Promise<Receiver>;
    /**
     * Creates an amqp sender on this session.
     * @param {SenderOptions} [options] Options that can be provided while creating an amqp sender.
     * @return {Promise<Sender>} Promise<Sender>
     * - **Resolves** the promise with the Sender object when rhea emits the "sender_open" event.
     * - **Rejects** the promise with an AmqpError when rhea emits the "sender_close" event while trying
     * to create an amqp sender.
     */
    createSender(options?: SenderOptions): Promise<Sender>;
    registerHandler(event: rhea.SessionEvents, handler: rhea.OnAmqpEvent): void;
    removeHandler(event: rhea.SessionEvents, handler: rhea.OnAmqpEvent): void;
    registerConnectionHandler(event: rhea.ConnectionEvents, handler: rhea.OnAmqpEvent): void;
    removeConnectionHandler(event: rhea.ConnectionEvents, handler: rhea.OnAmqpEvent): void;
}
