"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const amqp_common_1 = require("../amqp-common");
/**
 * @module IotHubConnectionConfig
 * @ignore
 */
var IotHubConnectionConfig;
(function (IotHubConnectionConfig) {
    /**
     * Creates the connection config.
     * @ignore
     * @param {string} connectionString - The event hub connection string
     * @param {string} [path]           - The name/path of the entity (hub name) to which the connection needs to happen
     */
    function create(connectionString, path) {
        if (!connectionString || (connectionString && typeof connectionString !== "string")) {
            throw new Error("'connectionString' is a required parameter and must be of type: 'string'.");
        }
        const parsedCS = amqp_common_1.parseConnectionString(connectionString);
        if (!path) {
            path = "messages/events";
        }
        const result = {
            connectionString: connectionString,
            hostName: parsedCS.HostName,
            host: (parsedCS && parsedCS.HostName) ? parsedCS.HostName.split(".")[0] : "",
            entityPath: path,
            sharedAccessKeyName: parsedCS.SharedAccessKeyName,
            sharedAccessKey: parsedCS.SharedAccessKey
        };
        return result;
    }
    IotHubConnectionConfig.create = create;
    /**
     * Validates the properties of connection config.
     * @ignore
     * @param {ConnectionConfig} config The connection config to be validated.
     */
    function validate(config) {
        if (!config || (config && typeof config !== "object")) {
            throw new Error("'config' is a required parameter and must be of type: 'object'.");
        }
        if (!config.hostName || (config.hostName && typeof config.hostName !== "string")) {
            throw new Error("'hostName' is a required property of the ConnectionConfig.");
        }
        if (!config.entityPath || (config.entityPath && typeof config.entityPath !== "string")) {
            throw new Error("'entityPath' is a required property of the ConnectionConfig.");
        }
        if (!config.sharedAccessKeyName || (config.sharedAccessKeyName && typeof config.sharedAccessKeyName !== "string")) {
            throw new Error("'sharedAccessKeyName' is a required property of the ConnectionConfig.");
        }
        if (!config.sharedAccessKey || (config.sharedAccessKey && typeof config.sharedAccessKey !== "string")) {
            throw new Error("'sharedAccessKey' is a required property of the ConnectionConfig.");
        }
    }
    IotHubConnectionConfig.validate = validate;
    /**
     * Convert iothub connection config to eventhub connection config.
     * @ignore
     * @param {IotHubConnectionConfig} iotHubConfig
     */
    function convertToEventHubConnectionConfig(iotHubConfig) {
        if (!iotHubConfig || (iotHubConfig && typeof iotHubConfig !== "object")) {
            throw new Error("'iotHubConfig' is a required parameter and must be of type: 'object'.");
        }
        validate(iotHubConfig);
        const config = {
            sharedAccessKey: iotHubConfig.sharedAccessKey,
            sharedAccessKeyName: iotHubConfig.sharedAccessKeyName,
            entityPath: iotHubConfig.entityPath,
            host: iotHubConfig.hostName,
            endpoint: `sb://${iotHubConfig.hostName}/`,
            connectionString: iotHubConfig.connectionString
        };
        return config;
    }
    IotHubConnectionConfig.convertToEventHubConnectionConfig = convertToEventHubConnectionConfig;
})(IotHubConnectionConfig = exports.IotHubConnectionConfig || (exports.IotHubConnectionConfig = {}));
//# sourceMappingURL=iotHubConnectionConfig.js.map